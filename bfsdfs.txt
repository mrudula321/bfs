#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

// Undirected graph represented using an adjacency list
class Graph {
    int numVertices;
    std::vector<std::vector<int>> adjacencyList;

public:
    Graph(int numVertices) : numVertices(numVertices) {
        adjacencyList.resize(numVertices);
    }

    void addEdge(int source, int destination) {
        adjacencyList[source].push_back(destination);
        adjacencyList[destination].push_back(source);
    }

    // Parallel Breadth First Search
    void parallelBFS(int startVertex) {
        std::vector<bool> visited(numVertices, false);
        std::queue<int> bfsQueue;

        visited[startVertex] = true;
        bfsQueue.push(startVertex);

        while (!bfsQueue.empty()) {
            int currentVertex = bfsQueue.front();
            bfsQueue.pop();

            std::cout << "Visited vertex: " << currentVertex << std::endl;

            // Parallelize the exploration of neighboring vertices
            #pragma omp parallel for
            for (int i = 0; i < adjacencyList[currentVertex].size(); ++i) {
                int neighbor = adjacencyList[currentVertex][i];

                #pragma omp critical
                {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        bfsQueue.push(neighbor);
                    }
                }
            }
        }
    }

    // Parallel Depth First Search
    void parallelDFS(int startVertex) {
        std::vector<bool> visited(numVertices, false);
        parallelDFSUtil(startVertex, visited);
    }

private:
    // Recursive DFS utility function
    void parallelDFSUtil(int currentVertex, std::vector<bool>& visited) {
        visited[currentVertex] = true;
        std::cout << "Visited vertex: " << currentVertex << std::endl;

        // Parallelize the exploration of neighboring vertices
        #pragma omp parallel for
        for (int i = 0; i < adjacencyList[currentVertex].size(); ++i) {
            int neighbor = adjacencyList[currentVertex][i];

            #pragma omp critical
            {
                if (!visited[neighbor]) {
                    parallelDFSUtil(neighbor, visited);
                }
            }
        }
    }
};

int main() {
    int numVertices = 7;  // Number of vertices in the graph

    Graph graph(numVertices);

    // Add edges to the graph
    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 5);
    graph.addEdge(2, 6);

    std::cout << "Parallel Breadth First Search (BFS):" << std::endl;
    graph.parallelBFS(0);

    std::cout << std::endl;

    std::cout << "Parallel Depth First Search (DFS):" << std::endl;
    graph.parallelDFS(0);

    return 0;
}