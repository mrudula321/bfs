

#import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler


from tensorflow.keras.models import Sequential

from tensorflow.keras.layers import Dense, LSTM

# Load the data
dataset = pd.read_csv('/content/GOOGL.csv')
data = dataset.filter(['Close']).values

# Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(data)

# Split the data into training and testing sets
training_data_len = int(np.ceil(len(data) * 0.8))
train_data = scaled_data[0:training_data_len, :]
test_data = scaled_data[training_data_len - 60:, :]

x_train, y_train = [], []
for i in range(60, len(train_data)): 
     x_train.append(train_data[i-60:i, 0])   
     y_train.append(train_data[i, 0])
x_train, y_train = np.array(x_train), np.array(y_train) 
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))


# Define the model
model = Sequential([
LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
LSTM(50, return_sequences=False),
Dense(25),
Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
history = model.fit(x_train, y_train, batch_size=1, epochs=1, verbose=1)

# Prepare the testing data
x_test, y_test = [], data[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])
x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# Make predictions on the testing data
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Compute the RMSE
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
print('RMSE:', rmse)

# Plot the results
train = dataset[:training_data_len].copy()
valid = dataset[training_data_len:].copy()
valid.loc[:, 'Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Google Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Close Price ($)')
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Validation', 'Predictions'], loc='lower right')
plt.show()

